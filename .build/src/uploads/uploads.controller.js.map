{
  "version": 3,
  "sources": ["../../../src/uploads/uploads.controller.ts"],
  "sourcesContent": ["import { FileInterceptor } from '@nestjs/platform-express';\nimport {\n  BadRequestException,\n  Controller,\n  Get,\n  Param,\n  Res,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport {\n  Crud,\n  CrudController,\n  CrudRequest,\n  Override,\n  ParsedBody,\n  ParsedRequest,\n} from '@rewiko/crud';\nimport { Upload } from './entities/upload.entity';\nimport { UploadsService } from './uploads.service';\nimport { diskStorage } from 'multer';\nimport { extname } from 'path';\nimport { Response } from 'express';\n\n@Crud({\n  model: {\n    type: Upload,\n  },\n  query: {\n    join: {\n      submission: {\n        eager: true,\n      },\n      'submission.nonfixed': {\n        eager: true,\n      },\n      'submission.fixed': {\n        eager: true,\n      },\n      createdBy: {\n        eager: true,\n        exclude: ['password'],\n        allow: ['username'],\n      },\n    },\n  },\n})\n@Controller('uploads')\nexport class UploadsController implements CrudController<Upload> {\n  constructor(public service: UploadsService) {}\n\n  /**\n   * It returns the base class of the current class.\n   * @returns The base property is being returned.\n   */\n  get base(): CrudController<Upload> {\n    return this;\n  }\n\n  /* This is a decorator that intercepts the request and saves the file to the specified location. */\n  @UseInterceptors(\n    FileInterceptor('files', {\n      storage: diskStorage({\n        destination: './uploads/files',\n        filename: (req, files, cb) => {\n          const randomName = Array(32)\n            .fill(null)\n            .map(() => Math.round(Math.random() * 16).toString(16))\n            .join('');\n          return cb(null, `${randomName}${extname(files.originalname)}`);\n        },\n      }),\n      fileFilter: (req, files, cb) => {\n        if (!files.originalname.match(/\\.(pdf|docx|doc)$/)) {\n          return cb(null, false);\n        }\n        cb(null, true);\n      },\n    }),\n  )\n  @UseInterceptors(\n    FileInterceptor('files', {\n      storage: diskStorage({\n        destination: './uploads/files',\n        filename: (req, files, cb) => {\n          const randomName = Array(32)\n            .fill(null)\n            .map(() => Math.round(Math.random() * 16).toString(16))\n            .join('');\n          return cb(null, `${randomName}${extname(files.originalname)}`);\n        },\n      }),\n      fileFilter: (req, files, cb) => {\n        if (!files.originalname.match(/\\.(pdf|docx|doc)$/)) {\n          return cb(null, false);\n        }\n        cb(null, true);\n      },\n    }),\n  )\n  @Override()\n  createOne(\n    @ParsedRequest() req: CrudRequest,\n    @ParsedBody() dto: Upload,\n    @UploadedFile() files: Express.Multer.File,\n  ) {\n    if (!files) {\n      throw new BadRequestException('File bukan pdf/docx/doc');\n    }\n    dto.files = files.filename; // log to see all available data\n\n    const response = {\n      message: 'File berhasil diupload',\n      filePath: `http://localhost:3000/uploads/files/${files.filename}`,\n    };\n    return this.base.createOneBase(req, dto) && response;\n  }\n\n  /* A method to get the file from the server. */\n  @Get('/files/:filename')\n  async getPdf(@Res() res: Response, @Param('filename') filename) {\n    res.sendFile(filename, { root: './uploads/files' });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,8BAAgC;AAChC,oBAQO;AACP,kBAOO;AACP,oBAAuB;AAEvB,oBAA4B;AAC5B,kBAAwB;AA2BjB,8BAA0D;AAAA,EAC/D,YAAmB,SAAyB;AAAzB;AAAA;AAAA,MAMf,OAA+B;AACjC,WAAO;AAAA;AAAA,EA6CT,UACmB,KACH,KACE,OAChB;AACA,QAAI,CAAC,OAAO;AACV,YAAM,IAAI,kCAAoB;AAAA;AAEhC,QAAI,QAAQ,MAAM;AAElB,UAAM,WAAW;AAAA,MACf,SAAS;AAAA,MACT,UAAU,uCAAuC,MAAM;AAAA;AAEzD,WAAO,KAAK,KAAK,cAAc,KAAK,QAAQ;AAAA;AAAA,QAKxC,OAAc,KAAkC,UAAU;AAC9D,QAAI,SAAS,UAAU,EAAE,MAAM;AAAA;AAAA;AApBjC;AAAA,EAzCC,mCACC,6CAAgB,SAAS;AAAA,IACvB,SAAS,+BAAY;AAAA,MACnB,aAAa;AAAA,MACb,UAAU,CAAC,KAAK,OAAO,OAAO;AAC5B,cAAM,aAAa,MAAM,IACtB,KAAK,MACL,IAAI,MAAM,KAAK,MAAM,KAAK,WAAW,IAAI,SAAS,KAClD,KAAK;AACR,eAAO,GAAG,MAAM,GAAG,aAAa,yBAAQ,MAAM;AAAA;AAAA;AAAA,IAGlD,YAAY,CAAC,KAAK,OAAO,OAAO;AAC9B,UAAI,CAAC,MAAM,aAAa,MAAM,sBAAsB;AAClD,eAAO,GAAG,MAAM;AAAA;AAElB,SAAG,MAAM;AAAA;AAAA;AAAA,EAId,mCACC,6CAAgB,SAAS;AAAA,IACvB,SAAS,+BAAY;AAAA,MACnB,aAAa;AAAA,MACb,UAAU,CAAC,KAAK,OAAO,OAAO;AAC5B,cAAM,aAAa,MAAM,IACtB,KAAK,MACL,IAAI,MAAM,KAAK,MAAM,KAAK,WAAW,IAAI,SAAS,KAClD,KAAK;AACR,eAAO,GAAG,MAAM,GAAG,aAAa,yBAAQ,MAAM;AAAA;AAAA;AAAA,IAGlD,YAAY,CAAC,KAAK,OAAO,OAAO;AAC9B,UAAI,CAAC,MAAM,aAAa,MAAM,sBAAsB;AAClD,eAAO,GAAG,MAAM;AAAA;AAElB,SAAG,MAAM;AAAA;AAAA;AAAA,EAId;AAAA,EAEE;AAAA,EACA;AAAA,EACA;AAAA,GAHH,AArDK,kBAqDL;AAmBM;AAAA,EADL,uBAAI;AAAA,EACS;AAAA,EAAsB,4CAAM;AAAA,GAApC,AAxED,kBAwEC;AAxED;AAAA,EAxBN,sBAAK;AAAA,IACJ,OAAO;AAAA,MACL,MAAM;AAAA;AAAA,IAER,OAAO;AAAA,MACL,MAAM;AAAA,QACJ,YAAY;AAAA,UACV,OAAO;AAAA;AAAA,QAET,uBAAuB;AAAA,UACrB,OAAO;AAAA;AAAA,QAET,oBAAoB;AAAA,UAClB,OAAO;AAAA;AAAA,QAET,WAAW;AAAA,UACT,OAAO;AAAA,UACP,SAAS,CAAC;AAAA,UACV,OAAO,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKf,8BAAW;AAAA,GACL;",
  "names": []
}
