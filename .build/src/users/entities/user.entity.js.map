{
  "version": 3,
  "sources": ["../../../../src/users/entities/user.entity.ts"],
  "sourcesContent": ["import {\n  BeforeInsert,\n  BeforeUpdate,\n  Column,\n  Entity,\n  JoinColumn,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport * as bcrypt from 'bcryptjs';\nimport { Role } from 'src/roles/entities/role.entity';\n\n@Entity({\n  orderBy: {\n    id: 'ASC',\n  },\n})\nexport class User {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ unique: true })\n  // Validate if username exists\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column({ default: () => 'CURRENT_TIMESTAMP' })\n  createdAt: Date;\n\n  @ManyToOne(() => User, (user) => user)\n  createdBy: User;\n\n  @OneToOne(() => User, { nullable: true })\n  @JoinColumn()\n  updatedBy: User;\n\n  @ManyToMany(() => Role, (role) => role.user, {\n    cascade: true,\n    onDelete: 'SET NULL',\n  })\n  @JoinTable()\n  roles: Role[];\n\n  @BeforeInsert()\n  @BeforeUpdate()\n  async hashPassword() {\n    this.password = await bcrypt.hash(this.password, 10);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,qBAWO;AACP,aAAwB;AACxB,kBAAqB;AAOd,iBAAW;AAAA,QA8BV,eAAe;AACnB,SAAK,WAAW,MAAM,OAAO,KAAK,KAAK,UAAU;AAAA;AAAA;AA7BnD;AAAA,EADC;AAAA,GACD,AAFK,KAEL;AAIA;AAAA,EAFC,2BAAO,EAAE,QAAQ;AAAA,GAElB,AANK,KAML;AAGA;AAAA,EADC;AAAA,GACD,AATK,KASL;AAGA;AAAA,EADC,2BAAO,EAAE,SAAS,MAAM;AAAA,GACzB,AAZK,KAYL;AAGA;AAAA,EADC,8BAAU,MAAM,MAAM,CAAC,SAAS;AAAA,GACjC,AAfK,KAeL;AAIA;AAAA,EAFC,6BAAS,MAAM,MAAM,EAAE,UAAU;AAAA,EACjC;AAAA,GACD,AAnBK,KAmBL;AAOA;AAAA,EALC,+BAAW,MAAM,kBAAM,CAAC,SAAS,KAAK,MAAM;AAAA,IAC3C,SAAS;AAAA,IACT,UAAU;AAAA;AAAA,EAEX;AAAA,GACD,AA1BK,KA0BL;AAIM;AAAA,EAFL;AAAA,EACA;AAAA,GACK,AA9BD,KA8BC;AA9BD;AAAA,EALN,2BAAO;AAAA,IACN,SAAS;AAAA,MACP,IAAI;AAAA;AAAA;AAAA,GAGD;",
  "names": []
}
